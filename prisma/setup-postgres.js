const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('Setting up PostgreSQL database...');

try {
  // 1. Check if this is a first-time setup
  const isFirstSetup = !fs.existsSync(path.join(__dirname, 'migrations', '.postgresql-setup'));

  if (isFirstSetup) {
    console.log('First-time PostgreSQL setup detected');
    
    // 2. Backup existing migrations for reference
    const migrationsDir = path.join(__dirname, 'migrations');
    if (fs.existsSync(migrationsDir)) {
      console.log('Backing up existing SQLite migrations...');
      const backupDir = path.join(__dirname, 'migrations_sqlite_backup');
      
      if (!fs.existsSync(backupDir)) {
        fs.mkdirSync(backupDir, { recursive: true });
      }
      
      // Only backup SQLite migrations if they haven't been backed up yet
      if (fs.readdirSync(migrationsDir).length > 0 && 
          (!fs.existsSync(backupDir) || fs.readdirSync(backupDir).length === 0)) {
        execSync(`cp -r ${migrationsDir}/* ${backupDir}/`);
      }
    }
    
    // 3. Ensure migrations directory exists
    if (!fs.existsSync(migrationsDir)) {
      fs.mkdirSync(migrationsDir, { recursive: true });
    }
    
    // 4. Create a migration for PostgreSQL
    const timestamp = new Date().toISOString().replace(/[^0-9]/g, '').slice(0, 14);
    const migrationDir = path.join(migrationsDir, `${timestamp}_postgres_init`);
    
    if (!fs.existsSync(migrationDir)) {
      fs.mkdirSync(migrationDir, { recursive: true });
    }
    
    // 5. Use our prepared PostgreSQL migration
    const pgMigrationSourcePath = path.join(__dirname, 'migrations_postgres', 'migration.sql');
    
    if (fs.existsSync(pgMigrationSourcePath)) {
      fs.copyFileSync(
        pgMigrationSourcePath,
        path.join(migrationDir, 'migration.sql')
      );
    } else {
      console.error('PostgreSQL migration template not found');
      process.exit(1);
    }
    
    // 6. Create migration_lock.toml with postgresql provider
    fs.writeFileSync(
      path.join(migrationsDir, 'migration_lock.toml'),
      '# Please do not edit this file manually\n# It should be added in your version-control system (e.g., Git)\nprovider = "postgresql"\n'
    );
    
    // 7. Mark as setup complete
    fs.writeFileSync(
      path.join(migrationsDir, '.postgresql-setup'),
      new Date().toISOString()
    );
    
    console.log('PostgreSQL migrations created successfully');
  }
  
  // 8. Run prisma migrate deploy to apply migrations
  console.log('Running migrations...');
  execSync('npx prisma migrate deploy', { stdio: 'inherit' });
  
  console.log('PostgreSQL setup complete!');
  
} catch (error) {
  console.error('Error during PostgreSQL setup:', error);
  process.exit(1);
}