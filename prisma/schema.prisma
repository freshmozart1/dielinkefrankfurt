// Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Specify the output location for better organization
  output   = "../node_modules/.prisma/client"
  // Add Prisma engine binary location for better Vercel compatibility
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Appointment model for event registration and management
model Appointment {
  // Identifiers and core fields
  id             Int       @id @default(autoincrement())
  title          String
  teaser         String    // Short headline/title for the appointment
  mainText       String    // Detailed description

  // Date and time information
  startDateTime  DateTime
  endDateTime    DateTime?

  // Location information
  street         String?
  city           String?
  state          String?
  postalCode     String?

  // Requester information
  firstName      String?
  lastName       String?

  // Additional details
  recurringText  String?   // Information about recurring nature of event if applicable
  fileUrls       String?   // JSON string of file URLs for attached documents
  featured       Boolean   @default(false) // Flag for highlighting in newsletters
  metadata       String?   // JSON string for additional metadata (cover images, etc.)

  // System fields
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  processed      Boolean   @default(false)
  processingDate DateTime?

  // Appointment status
  status         String    @default("pending") // possible values: pending, accepted, rejected

  @@index([processed]) // Add index for common query filter
  @@index([status]) // Add index for status filtering
  @@index([featured]) // Add index for featured filtering
  @@map("appointment") // Lowercase table name for PostgreSQL convention
}

// Newsletter settings for email generation
model Newsletter {
  id                 Int        @id @default(autoincrement())
  headerLogo         String?    // URL for the header logo
  headerBanner       String?    // URL for the header banner
  footerText         String?    // Text for the newsletter footer
  unsubscribeLink    String?    // Link for unsubscribing (placeholder for now)
  testEmailRecipients String?   // Comma-separated list of test email recipients

  // Email sending settings
  batchSize          Int        @default(100)   // Number of emails per batch
  batchDelay         Int        @default(1000)  // Milliseconds between batches
  fromEmail          String?    // Sender email address
  fromName           String?    // Sender name
  replyToEmail       String?    // Reply-to email address
  subjectTemplate    String?    // Template for subject line
  emailSalt          String?    // Salt for email hashing

  // Newsletter sending performance settings
  chunkSize          Int        @default(50)    // Number of emails processed per chunk (or BCC recipients per email)
  chunkDelay         Int        @default(500)   // Milliseconds between chunks
  emailDelay         Int        @default(50)    // Milliseconds between individual emails
  emailTimeout       Int        @default(60000) // Email sending timeout in milliseconds
  useBccSending      Boolean    @default(false) // Whether to use BCC sending instead of individual emails

  // SMTP connection settings
  connectionTimeout  Int        @default(30000) // SMTP connection timeout in milliseconds
  greetingTimeout    Int        @default(30000) // SMTP greeting timeout in milliseconds
  socketTimeout      Int        @default(45000) // SMTP socket timeout in milliseconds
  maxConnections     Int        @default(5)     // Maximum concurrent SMTP connections
  maxMessages        Int        @default(100)   // Maximum messages per SMTP connection

  // Retry logic settings
  maxRetries         Int        @default(3)     // Maximum verification retries
  maxBackoffDelay    Int        @default(10000) // Maximum backoff delay in milliseconds
  retryChunkSizes    String     @default("10,5,1") // Comma-separated retry chunk sizes

  // System fields
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  @@map("newsletter") // Lowercase table name for PostgreSQL convention
}

// Enum for Group status
enum GroupStatus {
  NEW
  ACTIVE
  ARCHIVED
}

// Enum for StatusReport status
enum StatusReportStatus {
  NEW
  ACTIVE
  ARCHIVED
  REJECTED
}

// Group model for managing groups/organizations
model Group {
  id                  String               @id @default(cuid())
  name                String               @db.VarChar(100)
  slug                String               @unique
  description         String               @db.Text
  logoUrl             String?
  metadata            String?              // JSON string for additional metadata (logo original URLs, etc.)
  status              GroupStatus          @default(NEW)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  statusReports       StatusReport[]
  responsiblePersons  ResponsiblePerson[]

  @@index([status])
  @@index([name])
  @@map("group") // Lowercase table name for PostgreSQL convention
}

// ResponsiblePerson model for group contacts
model ResponsiblePerson {
  id        String   @id @default(cuid())
  firstName String   @db.VarChar(50)
  lastName  String   @db.VarChar(50)
  email     String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String

  @@index([groupId])
  @@map("responsible_person") // Lowercase table name for PostgreSQL convention
}

// StatusReport model for group activity reports
model StatusReport {
  id                String              @id @default(cuid())
  title             String              @db.VarChar(100)
  content           String              @db.Text
  reporterFirstName String              @db.VarChar(50)
  reporterLastName  String              @db.VarChar(50)
  fileUrls          String?             // JSON string array of file URLs
  status            StatusReportStatus  @default(NEW)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  group             Group               @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId           String

  @@index([status])
  @@index([groupId])
  @@index([createdAt])
  @@map("status_report") // Lowercase table name for PostgreSQL convention
}

// Add to prisma/schema.prisma
model User {
  id                String      @id @default(cuid())
  username          String      @unique
  email             String      @unique
  passwordHash      String
  firstName         String?
  lastName          String?
  isActive          Boolean     @default(true)
  role              String      @default("admin")  // For future role expansion
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  passwordResetToken String?     
  passwordResetExpires DateTime?
  
  @@index([email])
  @@index([username])
  @@index([isActive])
  @@map("users") // PostgreSQL convention
}

// HashedRecipient model for newsletter subscribers
model HashedRecipient {
  id          String    @id @default(cuid())
  hashedEmail String    @unique
  firstSeen   DateTime  @default(now())
  lastSent    DateTime?

  @@index([hashedEmail])
  @@map("hashed_recipient") // Lowercase table name for PostgreSQL convention
}

// Unified Newsletter model for the complete lifecycle
model NewsletterItem {
  id               String    @id @default(cuid())
  subject          String
  introductionText String    @db.Text
  content          String?   @db.Text // Generated HTML content
  status           String    @default("draft") // draft, sending, sent, failed, partially_failed, retrying
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  sentAt           DateTime?
  recipientCount   Int?
  settings         String?   @db.Text // JSON of settings used for sending

  @@index([status])
  @@index([createdAt])
  @@index([sentAt])
  @@map("newsletter_item") // Lowercase table name for PostgreSQL convention
}