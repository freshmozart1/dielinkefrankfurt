// Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Specify the output location for better organization
  output   = "../node_modules/.prisma/client"
  // Add Prisma engine binary location for better Vercel compatibility
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Appointment model for event registration and management
model Appointment {
  // Identifiers and core fields
  id             Int       @id @default(autoincrement())
  title          String
  teaser         String    // Short headline/title for the appointment
  mainText       String    // Detailed description

  // Date and time information
  startDateTime  DateTime
  endDateTime    DateTime?

  // Location information
  street         String?
  city           String?
  state          String?
  postalCode     String?

  // Requester information
  firstName      String?
  lastName       String?

  // Additional details
  recurringText  String?   // Information about recurring nature of event if applicable
  fileUrls       String?   // JSON string of file URLs for attached documents
  featured       Boolean   @default(false) // Flag for highlighting in newsletters

  // System fields
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  processed      Boolean   @default(false)
  processingDate DateTime?

  // Appointment status
  status         String    @default("pending") // possible values: pending, accepted, rejected

  @@index([processed]) // Add index for common query filter
  @@index([status]) // Add index for status filtering
  @@index([featured]) // Add index for featured filtering
  @@map("appointment") // Lowercase table name for PostgreSQL convention
}

// Newsletter settings for email generation
model Newsletter {
  id                 Int        @id @default(autoincrement())
  headerLogo         String?    // URL for the header logo
  headerBanner       String?    // URL for the header banner
  footerText         String?    // Text for the newsletter footer
  unsubscribeLink    String?    // Link for unsubscribing (placeholder for now)
  testEmailRecipients String?   // Comma-separated list of test email recipients

  // System fields
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  @@map("newsletter") // Lowercase table name for PostgreSQL convention
}
