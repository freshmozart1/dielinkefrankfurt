// Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Specify the output location for better organization
  output   = "../node_modules/.prisma/client"
  // Add Prisma engine binary location for better Vercel compatibility
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Appointment model for event registration and management
model Appointment {
  // Identifiers and core fields
  id             Int       @id @default(autoincrement())
  title          String
  mainText       String    // Detailed description

  // Date and time information
  startDateTime  DateTime
  endDateTime    DateTime?

  // Location information
  street         String?
  city           String?
  locationDetails String?   @map("location_details")
  postalCode     String?

  // Requester information
  firstName      String?
  lastName       String?

  // Additional details
  recurringText  String?   // Information about recurring nature of event if applicable
  fileUrls       String?   // JSON string of file URLs for attached documents
  featured       Boolean   @default(false) // Flag for highlighting in newsletters
  metadata       String?   // JSON string for additional metadata (cover images, etc.)

  // System fields
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  processed        Boolean   @default(false)
  processingDate   DateTime?
  statusChangeDate DateTime? // Track when appointment status was last changed

  // Appointment status
  status           String    @default("pending") // possible values: pending, accepted, rejected
  rejectionReason  String?   // Reason for rejection if status is rejected

  @@index([processed]) // Add index for common query filter
  @@index([status]) // Add index for status filtering
  @@index([featured]) // Add index for featured filtering
  @@map("appointment") // Lowercase table name for PostgreSQL convention
}

// Newsletter settings for email generation
model Newsletter {
  id                 Int        @id @default(autoincrement())
  headerLogo         String?    // URL for the header logo
  headerBanner       String?    // URL for the header banner
  footerText         String?    // Text for the newsletter footer
  unsubscribeLink    String?    // Link for unsubscribing (placeholder for now)
  testEmailRecipients String?   // Comma-separated list of test email recipients

  // Email sending settings
  batchSize          Int        @default(100)   // Number of emails per batch
  batchDelay         Int        @default(1000)  // Milliseconds between batches
  fromEmail          String?    // Sender email address
  fromName           String?    // Sender name
  replyToEmail       String?    // Reply-to email address
  subjectTemplate    String?    // Template for subject line
  emailSalt          String?    // Salt for email hashing

  // Newsletter sending performance settings
  chunkSize          Int        @default(50)    // Number of emails processed per chunk (BCC recipients per email)
  chunkDelay         Int        @default(500)   // Milliseconds between chunks
  emailTimeout       Int        @default(60000) // Email sending timeout in milliseconds

  // SMTP connection settings
  connectionTimeout  Int        @default(30000) // SMTP connection timeout in milliseconds
  greetingTimeout    Int        @default(30000) // SMTP greeting timeout in milliseconds
  socketTimeout      Int        @default(45000) // SMTP socket timeout in milliseconds
  maxConnections     Int        @default(5)     // Maximum concurrent SMTP connections
  maxMessages        Int        @default(100)   // Maximum messages per SMTP connection

  // Retry logic settings
  maxRetries         Int        @default(3)     // Maximum verification retries
  maxBackoffDelay    Int        @default(10000) // Maximum backoff delay in milliseconds
  retryChunkSizes    String     @default("10,5,1") // Comma-separated retry chunk sizes

  // Header Composition Settings
  compositeWidth     Int?       @default(600)   // Width of composite header image
  compositeHeight    Int?       @default(200)   // Height of composite header image
  logoTopOffset      Int?       @default(20)    // Top offset for logo positioning
  logoLeftOffset     Int?       @default(20)    // Left offset for logo positioning
  logoHeight         Int?       @default(60)    // Height of logo in composite

  // Generated composite metadata
  compositeImageUrl  String?    // URL to generated composite image
  compositeImageHash String?    // Hash of source images + settings for cache invalidation

  // Newsletter content limits
  maxFeaturedAppointments    Int     @default(5)     // Maximum featured appointments in newsletter
  maxUpcomingAppointments    Int     @default(20)    // Maximum upcoming appointments in newsletter
  maxStatusReportsPerGroup   Int     @default(3)     // Maximum status reports per group
  maxGroupsWithReports       Int     @default(10)    // Maximum groups with reports to include

  // Status Report limits
  statusReportTitleLimit     Int     @default(100)   // Max characters for status report titles
  statusReportContentLimit   Int     @default(5000)  // Max characters for status report content

  // AI Generation Settings
  aiSystemPrompt             String? @db.Text       // System prompt for AI intro generation (Top Themen)
  aiVorstandsprotokollPrompt String? @db.Text       // Additional prompt for Vorstandsprotokoll (optional)
  aiTopicExtractionPrompt    String? @db.Text       // Prompt for extracting topics from Vorstandsprotokoll
  aiRefinementPrompt         String? @db.Text       // Prompt template for refining generated text
  aiModel                    String? @default("claude-3-5-sonnet-latest") // Selected AI model for generation
  anthropicApiKey            String? @db.Text       // Anthropic API key for Claude

  // System fields
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  @@map("newsletter") // Lowercase table name for PostgreSQL convention
}

// Enum for Group status
enum GroupStatus {
  NEW
  ACTIVE
  ARCHIVED
}

// Enum for StatusReport status
enum StatusReportStatus {
  NEW
  ACTIVE
  ARCHIVED
  REJECTED
}

// Group model for managing groups/organizations
model Group {
  id                      String               @id @default(cuid())
  name                    String               @db.VarChar(100)
  slug                    String               @unique
  description             String               @db.Text
  logoUrl                 String?
  metadata                String?              // JSON string for additional metadata (logo original URLs, etc.)
  status                  GroupStatus          @default(NEW)

  // Recurring meeting fields
  recurringPatterns       String?              @db.Text  // JSON array of rrule strings
  meetingTime             String?              @db.VarChar(5)  // HH:mm format
  meetingStreet           String?
  meetingCity             String?
  meetingPostalCode       String?              @db.VarChar(5)
  meetingLocationDetails  String?              @db.Text

  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  statusReports           StatusReport[]
  responsiblePersons      ResponsiblePerson[]

  @@index([status])
  @@index([name])
  @@map("group") // Lowercase table name for PostgreSQL convention
}

// ResponsiblePerson model for group contacts
model ResponsiblePerson {
  id        String   @id @default(cuid())
  firstName String   @db.VarChar(50)
  lastName  String   @db.VarChar(50)
  email     String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String

  @@index([groupId])
  @@map("responsible_person") // Lowercase table name for PostgreSQL convention
}

// StatusReport model for group activity reports
model StatusReport {
  id                String              @id @default(cuid())
  title             String              @db.VarChar(100)
  content           String              @db.Text
  reporterFirstName String              @db.VarChar(50)
  reporterLastName  String              @db.VarChar(50)
  fileUrls          String?             // JSON string array of file URLs
  status            StatusReportStatus  @default(NEW)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  group             Group               @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId           String

  @@index([status])
  @@index([groupId])
  @@index([createdAt])
  @@map("status_report") // Lowercase table name for PostgreSQL convention
}

model User {
  id           String   @id @default(cuid())
  username     String   @unique
  email        String   @unique
  passwordHash String
  firstName    String?
  lastName     String?
  isActive     Boolean  @default(true)
  role         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([email])
  @@index([username])
  @@index([isActive])
  @@map("users")
}

// HashedRecipient model for newsletter subscribers
model HashedRecipient {
  id          String    @id @default(cuid())
  hashedEmail String    @unique
  firstSeen   DateTime  @default(now())
  lastSent    DateTime?

  @@index([hashedEmail])
  @@map("hashed_recipient") // Lowercase table name for PostgreSQL convention
}

// Unified Newsletter model for the complete lifecycle
model NewsletterItem {
  id               String               @id @default(cuid())
  subject          String
  introductionText String               @db.Text
  content          String?              @db.Text // Generated HTML content
  status           String               @default("draft") // draft, sending, sent, failed, partially_failed, retrying
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  sentAt           DateTime?
  recipientCount   Int?
  settings         String?              @db.Text // JSON of settings used for sending
  analytics        NewsletterAnalytics?

  @@index([status])
  @@index([createdAt])
  @@index([sentAt])
  @@map("newsletter_item") // Lowercase table name for PostgreSQL convention
}

// Newsletter Analytics for tracking opens and clicks
model NewsletterAnalytics {
  id              String                  @id @default(cuid())
  newsletterId    String                  @unique
  newsletter      NewsletterItem          @relation(fields: [newsletterId], references: [id], onDelete: Cascade)
  totalRecipients Int                     @default(0)
  totalOpens      Int                     @default(0)
  uniqueOpens     Int                     @default(0)
  pixelToken      String                  @unique @default(cuid())
  createdAt       DateTime                @default(now())
  linkClicks      NewsletterLinkClick[]
  fingerprints    NewsletterFingerprint[]

  @@index([pixelToken])
  @@index([newsletterId])
  @@index([createdAt])
  @@map("newsletter_analytics") // Lowercase table name for PostgreSQL convention
}

// Track individual link clicks for analytics
model NewsletterLinkClick {
  id          String               @id @default(cuid())
  analyticsId String
  analytics   NewsletterAnalytics  @relation(fields: [analyticsId], references: [id], onDelete: Cascade)
  url         String               @db.Text
  linkType    String               // 'appointment' or 'statusreport'
  linkId      String?              // ID of the linked item
  clickCount  Int                  @default(0)
  uniqueClicks Int                 @default(0)
  firstClick  DateTime?
  lastClick   DateTime?
  fingerprints NewsletterLinkClickFingerprint[]
  
  @@unique([analyticsId, url])
  @@index([analyticsId])
  @@index([linkType])
  @@index([clickCount])
  @@map("newsletter_link_click") // Lowercase table name for PostgreSQL convention
}


// Track unique fingerprints for privacy-friendly open tracking
model NewsletterFingerprint {
  id              String               @id @default(cuid())
  analyticsId     String
  analytics       NewsletterAnalytics  @relation(fields: [analyticsId], references: [id], onDelete: Cascade)
  fingerprint     String               // SHA256 hash of headers + IP
  openCount       Int                  @default(0)
  firstOpenAt     DateTime             @default(now())
  lastOpenAt      DateTime             @default(now())
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  
  @@unique([analyticsId, fingerprint])
  @@index([analyticsId])
  @@index([fingerprint])
  @@map("newsletter_fingerprint") // Lowercase table name for PostgreSQL convention
}

// Track unique click fingerprints for privacy-friendly link click tracking
model NewsletterLinkClickFingerprint {
  id              String               @id @default(cuid())
  linkClickId     String
  linkClick       NewsletterLinkClick  @relation(fields: [linkClickId], references: [id], onDelete: Cascade)
  fingerprint     String               // SHA256 hash from request
  clickCount      Int                  @default(0)
  firstClickAt    DateTime             @default(now())
  lastClickAt     DateTime             @default(now())
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  
  @@unique([linkClickId, fingerprint])
  @@index([linkClickId])
  @@index([fingerprint])
  @@map("newsletter_link_click_fingerprint")
}


// Enum for Antrag status
enum AntragStatus {
  NEU        // New submission
  AKZEPTIERT // Accepted
  ABGELEHNT  // Rejected
}

// Antrag model for board requests
model Antrag {
  id                String       @id @default(cuid())
  
  // User Information
  firstName         String       @db.VarChar(50)
  lastName          String       @db.VarChar(50)
  email             String
  
  // Antrag Details
  title             String       @db.VarChar(200)
  summary           String       @db.VarChar(300)
  
  // Purpose Details (JSON structure for flexibility)
  purposes          String       @db.Text // JSON object with selected purposes and details
  
  // File Attachments
  fileUrls          String?      // JSON string array of file URLs
  
  // Status and Decision
  status            AntragStatus @default(NEU)
  decisionComment   String?      @db.Text
  decidedBy         String?      // Username of admin who made decision
  decidedAt         DateTime?
  
  // System fields
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  @@index([status])
  @@index([createdAt])
  @@map("antrag")
}

// Configuration for Antrag email recipients
model AntragConfiguration {
  id                 Int      @id @default(autoincrement())
  recipientEmails    String   // Comma-separated email addresses
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("antrag_configuration")
}

// Address model for reusable location addresses
model Address {
  id              String   @id @default(cuid())
  name            String   @unique @db.VarChar(100)
  street          String
  city            String
  postalCode      String   @db.VarChar(5)
  locationDetails String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([name])
  @@map("address")
}

// GroupSettings model for global group-related configuration (singleton pattern)
model GroupSettings {
  id                 Int      @id @default(autoincrement())
  officeContactEmail String?  @db.VarChar(200)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("group_settings")
}