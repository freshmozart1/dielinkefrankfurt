/**
 * Special build script for Vercel deployment to handle problematic migrations
 */
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

const MIGRATIONS_DIR = path.join(__dirname, 'migrations');
const IS_VERCEL = process.env.VERCEL === '1';

console.log('üîß Running Vercel build script for Prisma...');
console.log(`üîç Environment: ${IS_VERCEL ? 'Vercel' : 'Local'}`);

try {
  // Ensure the migrations directory exists
  if (!fs.existsSync(MIGRATIONS_DIR)) {
    fs.mkdirSync(MIGRATIONS_DIR, { recursive: true });
  }

  // Function to attempt a clean database reset on Vercel
  async function resetDatabase() {
    if (!process.env.DATABASE_URL) {
      console.error('‚ùå No DATABASE_URL found in environment');
      return false;
    }

    try {
      // 1. Run a simple SQL query to drop all tables (PostgreSQL)
      // This is destructive but acceptable for a fresh deployment
      const dropTablesQuery = `
      DROP SCHEMA public CASCADE;
      CREATE SCHEMA public;
      GRANT ALL ON SCHEMA public TO postgres;
      GRANT ALL ON SCHEMA public TO public;
      `;

      const tempSqlFile = path.join(__dirname, 'drop_tables.sql');
      fs.writeFileSync(tempSqlFile, dropTablesQuery);

      // Use psql to execute the query if available
      try {
        console.log('üóëÔ∏è Attempting to drop all tables in database...');
        execSync(`psql "${process.env.DATABASE_URL}" -f "${tempSqlFile}"`, { stdio: 'inherit' });
        console.log('‚úÖ Database reset successful');
        return true;
      } catch (psqlError) {
        console.log('‚ö†Ô∏è Could not use psql, database tables may still exist');
        return false;
      } finally {
        // Clean up temp file
        if (fs.existsSync(tempSqlFile)) {
          fs.unlinkSync(tempSqlFile);
        }
      }
    } catch (error) {
      console.error('‚ùå Error resetting database:', error);
      return false;
    }
  }

  // Main execution
  (async () => {
    // Generate fresh migrations
    console.log('üìù Creating fresh migration...');

    // Ensure the lock file uses postgresql
    fs.writeFileSync(
      path.join(MIGRATIONS_DIR, 'migration_lock.toml'),
      '# Please do not edit this file manually\n# It should be added in your version-control system (e.g., Git)\nprovider = "postgresql"\n'
    );

    // In Vercel, we'll try to reset the DB first for a clean state
    if (IS_VERCEL) {
      await resetDatabase();
    }

    // Create a fresh migration
    const timestamp = new Date().toISOString().replace(/[^0-9]/g, '').slice(0, 14);
    const newMigrationDir = path.join(MIGRATIONS_DIR, `${timestamp}_vercel_init`);
    
    if (!fs.existsSync(newMigrationDir)) {
      fs.mkdirSync(newMigrationDir, { recursive: true });
    }

    // Write PostgreSQL-compatible migration
    fs.writeFileSync(
      path.join(newMigrationDir, 'migration.sql'),
      `-- CreateTable
CREATE TABLE IF NOT EXISTS "Appointment" (
    "id" SERIAL PRIMARY KEY,
    "teaser" TEXT NOT NULL,
    "mainText" TEXT NOT NULL,
    "startDateTime" TIMESTAMP(3) NOT NULL,
    "endDateTime" TIMESTAMP(3),
    "street" TEXT,
    "city" TEXT,
    "state" TEXT,
    "postalCode" TEXT,
    "firstName" TEXT,
    "lastName" TEXT,
    "recurringText" TEXT,
    "fileUrls" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,
    "processed" BOOLEAN NOT NULL DEFAULT false,
    "processingDate" TIMESTAMP(3)
);`
    );

    console.log('‚úÖ New migration created at', newMigrationDir);

    // Generate Prisma client
    console.log('üîß Generating Prisma client...');
    execSync('npx prisma generate', { stdio: 'inherit' });

    // Deploy migrations
    console.log('üöÄ Deploying migrations...');
    execSync('npx prisma migrate deploy', { stdio: 'inherit' });

    console.log('‚úÖ Prisma setup completed successfully!');
    process.exit(0);
  })();
} catch (error) {
  console.error('‚ùå Error during Prisma setup for Vercel:', error);
  process.exit(1);
}